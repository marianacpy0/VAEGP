import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Guardamos resultados en una lista
results = []

for i in range(1, latent_dim+1):
    dim = f"Dimension {i}"
    subset = melted_df[melted_df['Dimension'] == dim]
    corr_tan = subset['Latent Value'].corr(subset['TAN'])
    corr_water = subset['Latent Value'].corr(subset['water_ppm'])
    corr_age = subset['Latent Value'].corr(subset['age_hours'])
    
    results.append([dim, corr_tan, corr_water, corr_age])

# Convertimos a DataFrame
corr_df = pd.DataFrame(results, columns=['Dimension', 'TAN', 'Water', 'Age'])
corr_df.set_index('Dimension', inplace=True)

# Heatmap
plt.figure(figsize=(8, 5))
sns.heatmap(corr_df, annot=True, cmap="coolwarm", center=0, fmt=".2f")
plt.title("Correlation of Latent Dimensions with TAN, Water, and Age", fontsize=14)
plt.tight_layout()
plt.show()






import numpy as np
import matplotlib.pyplot as plt

# Orden/df base
df_plot_ = df_predictions_evaluation_.reset_index(drop=True)

# ---- Figure con 2 columnas: 1) plot principal, 2) colorbar ----
fig = plt.figure(figsize=(12, 6), constrained_layout=True)
gs = fig.add_gridspec(nrows=1, ncols=2, width_ratios=[40, 1])  # ajusta el 40:1 si quieres m√°s/menos espacio

ax1 = fig.add_subplot(gs[0, 0])   # eje principal (Y1)
ax2 = ax1.twinx()                  # eje secundario (Y2)
cax = fig.add_subplot(gs[0, 1])    # eje exclusivo para la colorbar

# Eje X (elige uno)
x = np.arange(len(df_plot_))       # opci√≥n 1: √≠ndice
# x = df_plot_['water_ppm']        # opci√≥n 2: usar Water en X

# ---- Y1: Age ----
ax1.plot(x, df_plot_['age_hours'], color='skyblue', linewidth=2, label='Age [hours]')
ax1.set_xlabel('Index / Sample' if isinstance(x, np.ndarray) else 'Water [ppm]')
ax1.set_ylabel('Age Hours', color='skyblue')
ax1.tick_params(axis='y', labelcolor='skyblue')

# ---- Y2: TAN_pred (l√≠nea) ----
ax2.plot(x, df_plot_['TAN_pred'], color='crimson', linewidth=2, label='TAN_pred')
ax2.set_ylabel('Predicted TAN', color='crimson')
ax2.tick_params(axis='y', labelcolor='crimson')

# ---- Scatter sobre la l√≠nea roja coloreado por Water ----
sc = ax2.scatter(x, df_plot_['TAN_pred'],
                 c=df_plot_['water_ppm'], cmap='viridis',
                 s=40, alpha=0.9, edgecolors='none')

# ---- Colorbar en el eje cax (fuera del plot) ----
cbar = fig.colorbar(sc, cax=cax, orientation='vertical')
cbar.set_label('Water [ppm]')

ax1.grid(True)
fig.suptitle('Age vs Predicted TAN con Water al lado', fontsize=14)
plt.show()





import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable

df_plot_ = df_predictions_evaluation_.reset_index(drop=True)

fig, ax1 = plt.subplots(figsize=(10, 6))

# Age_hours en eje Y1
ax1.set_xlabel('Index / Sample')
ax1.set_ylabel('Age Hours', color='skyblue')
ax1.plot(df_plot_['age_hours'], color='skyblue', linewidth=2)
ax1.tick_params(axis='y', labelcolor='skyblue')

# Predicted TAN en eje Y2
ax2 = ax1.twinx()
ax2.set_ylabel('Predicted TAN', color='crimson')
ax2.plot(df_plot_['TAN_pred'], color='crimson', linewidth=2)
ax2.tick_params(axis='y', labelcolor='crimson')

# Scatter coloreado por water_ppm
sc = ax2.scatter(range(len(df_plot_)), df_plot_['TAN_pred'],
                 c=df_plot_['water_ppm'], cmap='viridis',
                 s=40, alpha=0.9, edgecolors='none')

# Crear un eje aparte abajo para la colorbar
divider = make_axes_locatable(ax1)
cax = divider.append_axes("bottom", size="5%", pad=0.6)
cbar = fig.colorbar(sc, cax=cax, orientation='horizontal')
cbar.set_label('Water [ppm]')

plt.title('Age vs Predicted TAN con Water como referencia', fontsize=14)
plt.grid(True)
plt.show()



import matplotlib.pyplot as plt

df_plot_ = df_predictions_evaluation_.reset_index(drop=True)

fig, ax1 = plt.subplots(figsize=(10, 6))

# Age_hours en eje Y1
ax1.set_xlabel('Index / Sample')
ax1.set_ylabel('Age Hours', color='skyblue')
ax1.plot(df_plot_['age_hours'], color='skyblue', linewidth=2)
ax1.tick_params(axis='y', labelcolor='skyblue')

# Predicted TAN en eje Y2
ax2 = ax1.twinx()
ax2.set_ylabel('Predicted TAN', color='crimson')
ax2.plot(df_plot_['TAN_pred'], color='crimson', linewidth=2)
ax2.tick_params(axis='y', labelcolor='crimson')

# Scatter coloreado por water_ppm
sc = ax2.scatter(range(len(df_plot_)), df_plot_['TAN_pred'],
                 c=df_plot_['water_ppm'], cmap='viridis',
                 s=40, alpha=0.9, edgecolors='none')

# Colorbar horizontal abajo
cbar = fig.colorbar(sc, ax=[ax1, ax2], orientation='horizontal', pad=0.2, shrink=0.8)
cbar.set_label('Water [ppm]')

plt.title('Age vs Predicted TAN con Water como referencia', fontsize=14)
fig.tight_layout()
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable

df_plot_ = df_predictions_evaluation_.reset_index(drop=True)

fig, ax1 = plt.subplots(figsize=(10, 6))

# Age_hours en eje Y1
ax1.set_xlabel('Index / Sample')
ax1.set_ylabel('Age Hours', color='skyblue')
ax1.plot(df_plot_['age_hours'], color='skyblue', linewidth=2)
ax1.tick_params(axis='y', labelcolor='skyblue')

# Predicted TAN en eje Y2
ax2 = ax1.twinx()
ax2.set_ylabel('Predicted TAN', color='crimson')
ax2.plot(df_plot_['TAN_pred'], color='crimson', linewidth=2)
ax2.tick_params(axis='y', labelcolor='crimson')

# Scatter coloreado por water_ppm
sc = ax2.scatter(range(len(df_plot_)), df_plot_['TAN_pred'],
                 c=df_plot_['water_ppm'], cmap='viridis',
                 s=40, alpha=0.9, edgecolors='none')

# Crear un eje aparte a la izquierda para la colorbar
divider = make_axes_locatable(ax1)
cax = divider.append_axes("left", size="3%", pad=0.8)
cbar = fig.colorbar(sc, cax=cax, orientation='vertical')
cbar.set_label('Water [ppm]')

plt.title('Age vs Predicted TAN con colorbar a la izquierda', fontsize=14)
fig.tight_layout()
plt.show()



import matplotlib.pyplot as plt

# Ordenamos si quieres un visual m√°s suave
df_plot_ = df_predictions_evaluation_.sort_values(by='water_ppm').reset_index(drop=True)

fig, ax1 = plt.subplots(figsize=(10, 6))

# üíß EJE Y1: Age Hours (izquierdo)
color_age = 'skyblue'
ax1.set_xlabel('Water [ppm]')
ax1.set_ylabel('Age Hours', color=color_age)
ax1.plot(df_plot_['water_ppm'], df_plot_['age_hours'], color=color_age, linewidth=2, label='Age [hours]')
ax1.tick_params(axis='y', labelcolor=color_age)

# üî• EJE Y2: Predicted TAN (derecho)
ax2 = ax1.twinx()
color_tan = 'crimson'
ax2.set_ylabel('Predicted TAN', color=color_tan)
ax2.plot(df_plot_['water_ppm'], df_plot_['TAN_pred'], color=color_tan, linewidth=2, label='TAN_pred')
ax2.tick_params(axis='y', labelcolor=color_tan)

# ‚ú® Scatter en parte baja para mostrar la distribuci√≥n de `water_ppm` discretamente
ax1.scatter(
    df_plot_['water_ppm'],          # eje X
    [0] * len(df_plot_),            # eje Y en cero (o muy cerca)
    color='gray',
    alpha=0.3,
    marker='|',
    s=40,
    label='Water markers'
)

# üíÖ T√≠tulo y visual
plt.title('Age and Predicted TAN vs Water ppm (con marcadores de agua)', fontsize=14)
fig.tight_layout()
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

# Ordenar por water si quieres m√°s suavecito visual
df_plot = df_predictions_evaluation_.sort_values(by='water_ppm').reset_index(drop=True)

fig, ax1 = plt.subplots(figsize=(10, 6))

# Primer eje: WATER
ax1.set_xlabel('Observaci√≥n (ordenada por agua)')
ax1.set_ylabel('Water [ppm]', color='skyblue')
ax1.plot(df_plot['water_ppm'], color='skyblue', linewidth=2, label='Water [ppm]')
ax1.tick_params(axis='y', labelcolor='skyblue')

# Segundo eje: TAN_pred
ax2 = ax1.twinx()
ax2.set_ylabel('Predicted TAN', color='crimson')
ax2.plot(df_plot['TAN_pred'], color='crimson', linewidth=2, label='TAN_pred')
ax2.tick_params(axis='y', labelcolor='crimson')

# T√≠tulo y visual
plt.title('Comparaci√≥n de Water vs TAN Predicho (doble eje)', fontsize=14)
fig.tight_layout()
plt.grid(True)
plt.show()