import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
image_path = "/mnt/data/36EEA805-E52C-4D35-8930-472331FEAFF3.jpeg"  # Update with the latest image if necessary
image = cv2.imread(image_path)
height, width = image.shape[:2]

# Convert to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply Canny edge detection
edges = cv2.Canny(gray, 50, 150, apertureSize=3)

# Apply Hough Line Transform to detect lines
lines = cv2.HoughLinesP(edges, 1, np.pi / 180, threshold=200, minLineLength=100, maxLineGap=10)

# Separate lines based on their orientation (horizontal or vertical)
horizontal_lines = []
vertical_lines = []

for line in lines:
    x1, y1, x2, y2 = line[0]
    if abs(y1 - y2) < 10:  # Horizontal line (y-coordinates are approximately equal)
        horizontal_lines.append(line[0])
    elif abs(x1 - x2) < 10:  # Vertical line (x-coordinates are approximately equal)
        vertical_lines.append(line[0])

# Identify the outermost horizontal and vertical lines
top_line = min(horizontal_lines, key=lambda l: l[1])  # Topmost horizontal line
bottom_line = max(horizontal_lines, key=lambda l: l[1])  # Bottommost horizontal line
left_line = min(vertical_lines, key=lambda l: l[0])  # Leftmost vertical line
right_line = max(vertical_lines, key=lambda l: l[0])  # Rightmost vertical line

# Draw the detected rectangular border on the original image
output_image = image.copy()
cv2.line(output_image, (top_line[0], top_line[1]), (top_line[2], top_line[3]), (0, 255, 0), 5)  # Green top line
cv2.line(output_image, (bottom_line[0], bottom_line[1]), (bottom_line[2], bottom_line[3]), (0, 255, 0), 5)  # Green bottom line
cv2.line(output_image, (left_line[0], left_line[1]), (left_line[2], left_line[3]), (255, 0, 0), 5)  # Blue left line
cv2.line(output_image, (right_line[0], right_line[1]), (right_line[2], right_line[3]), (0, 0, 255), 5)  # Red right line

# Display the final result
plt.imshow(cv2.cvtColor(output_image, cv2.COLOR_BGR2RGB))
plt.title("Detected Outer Rectangular Black Border with Measurement Lines")
plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
image_path = "/mnt/data/BDBFCB4E-3813-459A-975D-7A4A4CE2BA49.jpeg"
image = cv2.imread(image_path)
height, width = image.shape[:2]

# Convert to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Threshold to isolate dark (black) regions
_, thresh = cv2.threshold(gray, 50, 255, cv2.THRESH_BINARY_INV)

# Apply morphological closing to connect components
kernel = np.ones((10, 10), np.uint8)
closed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)

# Detect contours to find the black borders
contours, _ = cv2.findContours(closed, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Define minimum area and aspect ratio range for rectangular contours
min_area_threshold = 30000  # Area threshold to exclude small shapes
aspect_ratio_range = (1.5, 3.5)  # Aspect ratio range for rectangles

# Filter contours to keep only rectangular ones
filtered_contours = []
for cnt in contours:
    area = cv2.contourArea(cnt)
    if area > min_area_threshold:
        # Get the bounding rectangle for each contour
        x, y, w, h = cv2.boundingRect(cnt)
        aspect_ratio = float(w) / h
        
        # Check if the contour is rectangular based on aspect ratio
        if aspect_ratio_range[0] <= aspect_ratio <= aspect_ratio_range[1]:
            filtered_contours.append(cnt)

# Draw the filtered contour (outer rectangular border) for visual confirmation
contour_image = image.copy()
cv2.drawContours(contour_image, filtered_contours, -1, (0, 255, 0), 2)

# Find bounding box of the largest remaining contour (assumed to be the outer rectangular border)
outer_contour = max(filtered_contours, key=cv2.contourArea)
x, y, w, h = cv2.boundingRect(outer_contour)

# Draw the top green line across the top black border with thicker lines
top_line_y = y  # Top border of bounding box
cv2.line(image, (x, top_line_y), (x + w, top_line_y), (0, 255, 0), 5)  # Line thickness increased to 5
cv2.putText(image, "Top Border (55.58 mm)", (x + 20, top_line_y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

# Draw the left blue line along the left black border with thicker lines
left_line_x = x  # Left border of bounding box
cv2.line(image, (left_line_x, y), (left_line_x, y + h), (255, 0, 0), 5)  # Line thickness increased to 5
cv2.putText(image, "Left Border (Blue)", (left_line_x - 70, y + h // 2), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 0, 0), 2)

# Draw the right red line along the right black border with thicker lines
right_line_x = x + w  # Right border of bounding box
cv2.line(image, (right_line_x, y), (right_line_x, y + h), (0, 0, 255), 5)  # Line thickness increased to 5
cv2.putText(image, "Right Border (Red)", (right_line_x + 10, y + h // 2), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)

# Display the final result with adjusted borders and thicker lines
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title("Detected Rectangular Black Border with Measurement Lines")
plt.show()