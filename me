import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
image_path = "/mnt/data/CD1BBFF7-3350-458E-BFD0-E1FC7C8F7413.jpeg"
image = cv2.imread(image_path)
height, width = image.shape[:2]

# Convert to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply adaptive thresholding to isolate the black borders
adaptive_thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                        cv2.THRESH_BINARY_INV, 35, 15)

# Apply morphological closing
kernel = np.ones((20, 20), np.uint8)
morph = cv2.morphologyEx(adaptive_thresh, cv2.MORPH_CLOSE, kernel)

# Detect contours
contours, _ = cv2.findContours(morph, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Find the contour closest to the expected aspect ratio
target_aspect_ratio = 1.5  # Adjust based on the rectangle's expected aspect ratio
best_contour = None
min_aspect_ratio_diff = float('inf')
for cnt in contours:
    x, y, w, h = cv2.boundingRect(cnt)
    aspect_ratio = w / float(h) if h > 0 else 0
    aspect_ratio_diff = abs(aspect_ratio - target_aspect_ratio)
    
    if aspect_ratio_diff < min_aspect_ratio_diff:
        min_aspect_ratio_diff = aspect_ratio_diff
        best_contour = cnt

# If a contour matching the aspect ratio is found, proceed with drawing
if best_contour is not None:
    x, y, w, h = cv2.boundingRect(best_contour)
    adjusted_image = image.copy()

    # Draw bounding box for reference
    cv2.rectangle(adjusted_image, (x, y), (x + w, y + h), (0, 255, 0), 3)

    # Determine orientation based on width and height of the bounding box
    if w > h:  # Horizontal orientation
        # Draw the red measurement line along the top border
        red_line_y = y + int(h * 0.1)  # Adjust as necessary for positioning
        cv2.line(adjusted_image, (x, red_line_y), (x + w, red_line_y), (0, 0, 255), 3)
        cv2.putText(adjusted_image, "Top Border (55.57 mm)", (x + 20, red_line_y - 10), 
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)
    else:  # Vertical orientation
        # Draw the red measurement line along the left border
        red_line_x = x + int(w * 0.1)  # Adjust as necessary for positioning
        cv2.line(adjusted_image, (red_line_x, y), (red_line_x, y + h), (0, 0, 255), 3)
        cv2.putText(adjusted_image, "Left Border (55.57 mm)", (red_line_x - 70, y + 20), 
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)

    # Display the final result
    plt.imshow(cv2.cvtColor(adjusted_image, cv2.COLOR_BGR2RGB))
    plt.title("Detected Black Borders with Measurement Lines")
    plt.show()
else:
    print("No suitable contour matching the aspect ratio found.")