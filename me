import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
image_path = "/mnt/data/1AB859FF-A351-4F7F-8409-F7E5507AE412.jpeg"
image = cv2.imread(image_path)
height, width = image.shape[:2]

# Convert to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Threshold to isolate dark (black) regions
_, thresh = cv2.threshold(gray, 50, 255, cv2.THRESH_BINARY_INV)  # 50 is a threshold for dark areas

# Apply morphological closing to connect components
kernel = np.ones((10, 10), np.uint8)
closed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)

# Detect contours to find the black borders
contours, _ = cv2.findContours(closed, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Assume largest contours correspond to outer black borders
contour_image = image.copy()
for contour in contours:
    # Draw contours for visual confirmation
    cv2.drawContours(contour_image, [contour], -1, (0, 255, 0), 2)

# Find bounding box of the outer black borders
x, y, w, h = cv2.boundingRect(max(contours, key=cv2.contourArea))

# Draw the top green line across the top black border
top_line_y = y  # Top border of bounding box
cv2.line(image, (x, top_line_y), (x + w, top_line_y), (0, 255, 0), 3)
cv2.putText(image, "Top Border (55.58 mm)", (x + 20, top_line_y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

# Draw the left blue line along the left black border
left_line_x = x  # Left border of bounding box
cv2.line(image, (left_line_x, y), (left_line_x, y + h), (255, 0, 0), 3)
cv2.putText(image, "Left Border (Blue)", (left_line_x - 70, y + h // 2), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 0, 0), 2)

# Draw the right red line along the right black border
right_line_x = x + w  # Right border of bounding box
cv2.line(image, (right_line_x, y), (right_line_x, y + h), (0, 0, 255), 3)
cv2.putText(image, "Right Border (Red)", (right_line_x + 10, y + h // 2), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)

# Display the final result with adjusted borders
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title("Detected Black Borders with Measurement Lines")
plt.show()