import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
image_path = "/mnt/data/C63FFCF1-48C2-485A-89D3-D6845888E4AA.jpeg"  # Adjust path as needed
image = cv2.imread(image_path)
height, width = image.shape[:2]

# Convert to grayscale and apply adaptive thresholding
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
adaptive_thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                        cv2.THRESH_BINARY_INV, 51, 10)

# Morphological closing to reduce noise and enhance structure
kernel = np.ones((5, 5), np.uint8)
morph = cv2.morphologyEx(adaptive_thresh, cv2.MORPH_CLOSE, kernel)

# Find contours
contours, _ = cv2.findContours(morph, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Filter contours by size to find the main shape (likely trapezoid)
detected_contour = None
for cnt in contours:
    area = cv2.contourArea(cnt)
    if 20000 < area < 100000:  # Adjust area range as needed
        epsilon = 0.02 * cv2.arcLength(cnt, True)
        approx = cv2.approxPolyDP(cnt, epsilon, True)
        if len(approx) == 4:  # Looking for a quadrilateral shape
            detected_contour = approx
            break

# Draw trapezoid if detected
detected_image = image.copy()
if detected_contour is not None:
    cv2.drawContours(detected_image, [detected_contour], -1, (0, 255, 0), 3)  # Green for trapezoid
    
    # Optionally highlight the top and bottom edges of the trapezoid if needed
    # Here we assume approx points are sorted, which may need adjustment in complex images
    top_edge = (detected_contour[0][0], detected_contour[1][0])
    bottom_edge = (detected_contour[2][0], detected_contour[3][0])
    
    cv2.line(detected_image, top_edge[0], top_edge[1], (255, 0, 0), 3)  # Blue line for top edge
    cv2.line(detected_image, bottom_edge[0], bottom_edge[1], (0, 0, 255), 3)  # Red line for bottom edge

else:
    # If no trapezoid detected, use Hough Line Transform to approximate horizontal lines
    edges = cv2.Canny(morph, 50, 150)
    lines = cv2.HoughLinesP(edges, 1, np.pi / 180, threshold=150, minLineLength=100, maxLineGap=20)
    
    # Filter lines to retain only near-horizontal ones and draw them
    if lines is not None:
        for line in lines:
            x1, y1, x2, y2 = line[0]
            angle = abs(np.arctan2(y2 - y1, x2 - x1) * 180 / np.pi)
            if 80 <= angle <= 100:  # Keep only near-horizontal lines
                cv2.line(detected_image, (x1, y1), (x2, y2), (255, 0, 255), 2)  # Purple for alternative lines

# Display the final result
plt.figure(figsize=(10, 10))
plt.imshow(cv2.cvtColor(detected_image, cv2.COLOR_BGR2RGB))
plt.title("Detected Trapezoid or Reference Lines")
plt.show()




import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
image_path = "/mnt/data/C63FFCF1-48C2-485A-89D3-D6845888E4AA.jpeg"  # Adjust path as necessary
image = cv2.imread(image_path)
height, width = image.shape[:2]

# Convert to grayscale and apply adaptive thresholding
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
adaptive_thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                        cv2.THRESH_BINARY_INV, 51, 10)

# Use Canny edge detection to highlight edges
edges = cv2.Canny(adaptive_thresh, 50, 150)

# Apply morphological closing to reduce noise and fill gaps
kernel = np.ones((5, 5), np.uint8)
morph = cv2.morphologyEx(edges, cv2.MORPH_CLOSE, kernel)

# Find contours in the morphologically closed image
contours, _ = cv2.findContours(morph, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Initialize variables to hold the detected trapezoid or lines
detected_image = image.copy()
trapezoid_contour = None
lines_to_draw = []

# Iterate through contours to find trapezoid or approximate lines
for cnt in contours:
    epsilon = 0.02 * cv2.arcLength(cnt, True)
    approx = cv2.approxPolyDP(cnt, epsilon, True)
    
    # Check for a 4-sided polygon (potential trapezoid)
    if len(approx) == 4 and cv2.isContourConvex(approx):
        area = cv2.contourArea(cnt)
        aspect_ratio = max(w, h) / min(w, h) if min(w, h) > 0 else 0
        
        # Additional filters for area and aspect ratio if needed
        if 2000 < area < 30000 and 0.7 < aspect_ratio < 1.3:
            trapezoid_contour = approx
            cv2.drawContours(detected_image, [approx], -1, (0, 255, 0), 3)  # Draw trapezoid in green
            break
    else:
        # Approximate lines from the contour for non-trapezoidal shapes
        rect = cv2.minAreaRect(cnt)
        box = cv2.boxPoints(rect)
        box = np.int0(box)

        # Analyze angles of box edges to filter near-horizontal lines
        for i in range(4):
            x1, y1 = box[i]
            x2, y2 = box[(i + 1) % 4]
            angle = abs(np.arctan2(y2 - y1, x2 - x1) * 180 / np.pi)
            
            # Filter lines that are near horizontal (e.g., within 10-20 degrees of horizontal)
            if 70 <= angle <= 110:  # Adjust angle range for flexibility
                lines_to_draw.append((x1, y1, x2, y2))

# Draw detected lines if no trapezoid is found
if not trapezoid_contour and lines_to_draw:
    for (x1, y1, x2, y2) in lines_to_draw:
        cv2.line(detected_image, (x1, y1), (x2, y2), (255, 0, 255), 2)  # Draw lines in purple

# Display the final result
plt.figure(figsize=(10, 10))
plt.imshow(cv2.cvtColor(detected_image, cv2.COLOR_BGR2RGB))
plt.title("Detected Trapezoid or Near-Horizontal Lines")
plt.show()





h

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
image_path = "/mnt/data/73C3B663-CD11-48ED-8FA3-C8253B7F6B51.jpeg"  # Update path as necessary
image = cv2.imread(image_path)
height, width = image.shape[:2]

# Convert to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply adaptive thresholding for consistent edge detection
adaptive_thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                        cv2.THRESH_BINARY_INV, 51, 10)

# Use Canny edge detection for enhanced edge detection
edges = cv2.Canny(adaptive_thresh, 50, 150)

# Perform morphological closing to join gaps in edges
kernel = np.ones((5, 5), np.uint8)
closed_edges = cv2.morphologyEx(edges, cv2.MORPH_CLOSE, kernel)

# Detect contours from the closed edge image
contours, _ = cv2.findContours(closed_edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Attempt to detect the trapezoid
detected_image = image.copy()
trapezoid_contour = None

for cnt in contours:
    epsilon = 0.05 * cv2.arcLength(cnt, True)
    approx = cv2.approxPolyDP(cnt, epsilon, True)
    
    # Check for trapezoid-like 4-sided contour
    if len(approx) == 4 and cv2.isContourConvex(approx):
        area = cv2.contourArea(cnt)
        if area > 5000:  # Adjust as necessary
            trapezoid_contour = approx
            cv2.drawContours(detected_image, [approx], -1, (0, 255, 0), 3)  # Green trapezoid outline
            break

# If trapezoid detected, proceed with top and bottom line extraction
if trapezoid_contour is not None:
    x, y, w, h = cv2.boundingRect(trapezoid_contour)
    # Draw lines across the top and bottom edges of the trapezoid
    top_line_y = y
    bottom_line_y = y + h
    
    cv2.line(detected_image, (x, top_line_y), (x + w, top_line_y), (255, 0, 255), 3)  # Top line in purple
    cv2.line(detected_image, (x, bottom_line_y), (x + w, bottom_line_y), (255, 0, 255), 3)  # Bottom line in purple

# Fallback: If trapezoid is not detected, look for two main horizontal lines instead
else:
    lines = cv2.HoughLinesP(closed_edges, 1, np.pi / 180, threshold=100, minLineLength=width * 0.5, maxLineGap=20)
    if lines is not None:
        top_line_y, bottom_line_y = None, None
        min_y, max_y = height, 0
        
        for line in lines:
            x1, y1, x2, y2 = line[0]
            y_avg = (y1 + y2) // 2
            
            # Determine top-most and bottom-most lines
            if y_avg < min_y:
                min_y = y_avg
                top_line_y = y_avg
            if y_avg > max_y:
                max_y = y_avg
                bottom_line_y = y_avg

        # Draw the top and bottom horizontal lines as fallback
        if top_line_y is not None:
            cv2.line(detected_image, (0, top_line_y), (width, top_line_y), (255, 0, 0), 2)  # Top line in blue
        if bottom_line_y is not None:
            cv2.line(detected_image, (0, bottom_line_y), (width, bottom_line_y), (0, 0, 255), 2)  # Bottom line in red

# Display the final result
plt.imshow(cv2.cvtColor(detected_image, cv2.COLOR_BGR2RGB))
plt.title("Detected Trapezoid or Reference Lines")
plt.show()



m

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
image_path = "/mnt/data/8A9A04D8-F65F-427D-A09A-8D253094A54D.jpeg"  # Update path if needed
image = cv2.imread(image_path)
height, width = image.shape[:2]

# Convert to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply adaptive thresholding for better edge detection
adaptive_thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                        cv2.THRESH_BINARY_INV, 51, 10)

# Use Canny edge detection
edges = cv2.Canny(adaptive_thresh, 50, 150)

# Morphological closing to strengthen main edges
kernel = np.ones((5, 5), np.uint8)
closed_edges = cv2.morphologyEx(edges, cv2.MORPH_CLOSE, kernel)

# Detect contours in the processed edge image
contours, _ = cv2.findContours(closed_edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Try to find the trapezoid using the original contour-based approach
found_trapezoid = False
detected_image = image.copy()

for cnt in contours:
    epsilon = 0.05 * cv2.arcLength(cnt, True)
    approx = cv2.approxPolyDP(cnt, epsilon, True)
    
    # Check for 4-sided convex shape resembling a trapezoid
    if len(approx) == 4 and cv2.isContourConvex(approx):
        area = cv2.contourArea(cnt)
        if area > 5000:  # Adjust area threshold as needed
            found_trapezoid = True
            cv2.drawContours(detected_image, [approx], -1, (0, 255, 0), 3)  # Draw trapezoid
            break

# If trapezoid not found, switch to line detection
if not found_trapezoid:
    lines = cv2.HoughLinesP(edges, 1, np.pi / 180, threshold=200, minLineLength=500, maxLineGap=20)
    
    # Define angle tolerance and y-coordinate range for top and bottom lines
    angle_tolerance = 15
    y_top_range = (int(height * 0.2), int(height * 0.4))  # Example top area range
    y_bottom_range = (int(height * 0.6), int(height * 0.8))  # Example bottom area range

    # Variables to store lines
    top_line_drawn = False
    bottom_line_drawn = False

    for line in lines:
        x1, y1, x2, y2 = line[0]
        # Calculate the angle of the line
        angle = np.degrees(np.arctan2(y2 - y1, x2 - x1))
        
        # Check if the angle is within the horizontal tolerance
        if abs(angle) < angle_tolerance or abs(angle - 180) < angle_tolerance:
            # Calculate the average y-coordinate for the line
            y_avg = int((y1 + y2) / 2)
            
            # Check if this line falls in the expected range for top or bottom
            if y_top_range[0] <= y_avg <= y_top_range[1] and not top_line_drawn:
                cv2.line(detected_image, (0, y_avg), (width, y_avg), (255, 0, 255), 3)  # Top purple line
                top_line_drawn = True
            elif y_bottom_range[0] <= y_avg <= y_bottom_range[1] and not bottom_line_drawn:
                cv2.line(detected_image, (0, y_avg), (width, y_avg), (255, 0, 255), 3)  # Bottom purple line
                bottom_line_drawn = True

            # Stop if both lines are drawn
            if top_line_drawn and bottom_line_drawn:
                break

# Display the result
plt.imshow(cv2.cvtColor(detected_image, cv2.COLOR_BGR2RGB))
plt.title("Detected Trapezoid or Reference Lines")
plt.show()