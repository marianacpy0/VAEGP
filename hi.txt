import cv2
import numpy as np
import os
from scipy.spatial import distance

def find_three_circles(image, image_name):
    # Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Apply Gaussian blur to reduce noise
    blurred = cv2.GaussianBlur(gray, (3, 3), 1)
    
    # Apply adaptive thresholding
    thresh = cv2.adaptiveThreshold(blurred, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                   cv2.THRESH_BINARY_INV, 11, 2)
    
    # Detect contours in the thresholded image
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Gather all radii for contours to determine an adaptive range
    radii = []
    for contour in contours:
        ((x, y), radius) = cv2.minEnclosingCircle(contour)
        radii.append(radius)
    
    # Calculate a median radius to adjust the range dynamically
    if len(radii) == 0:
        print(f"No contours found in {image_name}")
        return None
    
    median_radius = np.median(radii)
    radius_range_min = max(4, median_radius * 0.7)  # Tighten lower bound to exclude small circles
    radius_range_max = median_radius * 1.5  # Allow flexibility for upper bound

    # Filter contours based on adjusted radius range and circularity
    circle_candidates = []
    for contour in contours:
        ((x, y), radius) = cv2.minEnclosingCircle(contour)
        area = cv2.contourArea(contour)
        
        # Check if radius is within the adaptive range
        if radius_range_min < radius < radius_range_max:
            # Calculate circularity to ensure it's close to a circle
            circularity = 4 * np.pi * (area / (cv2.arcLength(contour, True) ** 2))
            if 0.6 < circularity < 1.3:  # Adjust circularity range if needed
                circle_candidates.append((int(x), int(y), int(radius)))

    # Sort by x-coordinate to keep them in order
    circle_candidates = sorted(circle_candidates, key=lambda c: c[0])

    # Filter out small, isolated circles by checking proximity within groups
    valid_circles = []
    for i in range(len(circle_candidates) - 2):
        x1, y1, r1 = circle_candidates[i]
        x2, y2, r2 = circle_candidates[i + 1]
        x3, y3, r3 = circle_candidates[i + 2]
        
        # Calculate distances between the circles
        dist_1_2 = distance.euclidean((x1, y1), (x2, y2))
        dist_2_3 = distance.euclidean((x2, y2), (x3, y3))
        
        # Only keep groups of three circles that are close to each other
        if dist_1_2 < 50 and dist_2_3 < 50:  # Adjust distance threshold as needed
            valid_circles = [(x1, y1, r1), (x2, y2, r2), (x3, y3, r3)]
            break

    # If fewer than 3 valid circles are found, return None
    if len(valid_circles) < 3:
        print(f"Less than 3 valid circles found in {image_name}")
        return None

    return valid_circles

# Loop through all images in a folder and apply function
folder_path = "path/to/your/folder"  # Replace with actual folder path
missing_circle_count = 0
total_images = 0

for filename in os.listdir(folder_path):
    if filename.endswith(".jpg") or filename.endswith(".png"):
        image_path = os.path.join(folder_path, filename)
        image = cv2.imread(image_path)
        total_images += 1
        
        circles = find_three_circles(image, filename)
        
        if circles is None:
            missing_circle_count += 1
            print(f"No valid circles found in {filename}")
        else:
            print(f"Found 3 circles in {filename}: {circles}")

print(f"Processed {total_images} images, {missing_circle_count} images had no valid circles.")




import cv2
import numpy as np
import matplotlib.pyplot as plt
import os

def find_three_circles(image, image_name):
    # Step 1: Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Step 2: Apply Gaussian blur to reduce noise
    blurred = cv2.GaussianBlur(gray, (3, 3), 1)
    
    # Step 3: Apply adaptive thresholding
    thresh = cv2.adaptiveThreshold(blurred, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                   cv2.THRESH_BINARY_INV, 11, 2)
    
    # Step 4: Detect contours in the thresholded image
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Step 5: Loop through contours and filter based on circularity and area
    circle_candidates = []
    for contour in contours:
        # Fit an enclosing circle to get the radius
        ((x, y), radius) = cv2.minEnclosingCircle(contour)
        area = cv2.contourArea(contour)
        
        # Adjust the range of radius and circularity for smaller circles
        if 4 < radius < 10:  # Adjusted radius range for smaller circles
            circularity = 4 * np.pi * (area / (cv2.arcLength(contour, True) ** 2))
            if 0.5 < circularity < 1.3:  # Adjusted circularity threshold
                circle_candidates.append((int(x), int(y), int(radius)))
    
    # Sort the detected circles by x-coordinate to align in order
    circle_candidates = sorted(circle_candidates, key=lambda c: c[0])

    # Check if there are at least three circles
    if len(circle_candidates) < 3:
        print(f"Less than 3 circles found in {image_name}")
        return None  # Return None if fewer than 3 circles are found
    
    # Return only the first three circles
    return circle_candidates[:3]

# Loop through all images in a folder
folder_path = "path/to/your/folder"  # Replace with your folder path

for filename in os.listdir(folder_path):
    if filename.endswith(".jpg") or filename.endswith(".png"):  # Adjust file types as needed
        image_path = os.path.join(folder_path, filename)
        image = cv2.imread(image_path)

        # Call the find_three_circles function for each image
        circles = find_three_circles(image, filename)
        
        if circles:
            print(f"Found 3 circles in {filename}: {circles}")
        else:
            print(f"No valid circles found in {filename}")



import cv2
import numpy as np
import matplotlib.pyplot as plt

# Assuming `circle_candidates` contains the coordinates and radii of the three detected circles
# Example: circle_candidates = [(x1, y1, r1), (x2, y2, r2), (x3, y3, r3)]

# Sort the circles based on their x-coordinate to identify leftmost, center, and rightmost
circle_candidates.sort(key=lambda c: c[0])  # Sort by x-coordinate

# Extract the coordinates of the first and last circles
(x1, y1, r1) = circle_candidates[0]
(x3, y3, r3) = circle_candidates[-1]

# Calculate the Euclidean distance in pixels between the centers of the first and last circles
pixel_distance = np.sqrt((x3 - x1)**2 + (y3 - y1)**2)

# Calculate the pixel-to-millimeter ratio
mm_per_pixel = 10 / pixel_distance  # 10 mm is the known physical distance between the circles
print(f"Pixel-to-mm Ratio: {mm_per_pixel:.4f} mm/pixel")

# Draw the 10 mm reference line
output = image.copy()  # Copy of the original image to draw on

# Determine the length in pixels for 10 mm
line_length_in_pixels = int(10 / mm_per_pixel)

# Draw the line between the first and last circle (can be extended as a line in that direction)
cv2.line(output, (x1, y1), (x3, y3), (255, 0, 0), 2)  # Blue line between the centers of first and last circles

# Alternatively, draw an example 10 mm line at a known point on the image
cv2.line(output, (x1, y1), (x1 + line_length_in_pixels, y1), (0, 255, 0), 3)  # Green 10 mm line starting from the first circle

# Draw the detected circles on the output image
for (x, y, r) in circle_candidates:
    cv2.circle(output, (x, y), r, (0, 255, 0), 2)  # Green boundary for each circle
    cv2.circle(output, (x, y), 2, (0, 0, 255), 3)  # Red center for each circle

# Display the final image
plt.figure(figsize=(10, 10))
plt.imshow(cv2.cvtColor(output, cv2.COLOR_BGR2RGB))
plt.title("Detected Circles with 10 mm Reference Line")
plt.axis("off")
plt.show()



import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
image_path = "/mnt/data/your_image.jpeg"  # Replace with your image path
image = cv2.imread(image_path)
output = image.copy()

# Step 1: Convert to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
plt.figure(figsize=(10, 10))
plt.imshow(gray, cmap='gray')
plt.title("Grayscale Image")
plt.axis("off")
plt.show()

# Step 2: Apply Gaussian blur to reduce noise
blurred = cv2.GaussianBlur(gray, (3, 3), 1)
plt.figure(figsize=(10, 10))
plt.imshow(blurred, cmap='gray')
plt.title("Blurred Image")
plt.axis("off")
plt.show()

# Step 3: Apply adaptive thresholding
thresh = cv2.adaptiveThreshold(blurred, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                               cv2.THRESH_BINARY_INV, 11, 2)
plt.figure(figsize=(10, 10))
plt.imshow(thresh, cmap='gray')
plt.title("Adaptive Thresholded Image")
plt.axis("off")
plt.show()

# Step 4: Detect contours in the thresholded image
contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Step 5: Loop through contours and filter based on circularity and area
circle_candidates = []
for contour in contours:
    # Fit an enclosing circle to get the radius
    ((x, y), radius) = cv2.minEnclosingCircle(contour)
    area = cv2.contourArea(contour)
    
    # Adjust the range of radius and circularity for smaller circles
    if 4 < radius < 10:  # Adjusted radius range for smaller circles
        circularity = 4 * np.pi * (area / (cv2.arcLength(contour, True) ** 2))
        if 0.5 < circularity < 1.3:  # Adjusted circularity threshold
            circle_candidates.append((int(x), int(y), int(radius)))

# Display the contours to see all detected shapes
contour_overlay = cv2.cvtColor(thresh, cv2.COLOR_GRAY2BGR)
cv2.drawContours(contour_overlay, contours, -1, (0, 255, 0), 1)

plt.figure(figsize=(10, 10))
plt.imshow(contour_overlay)
plt.title("Contours Detected on Thresholded Image")
plt.axis("off")
plt.show()

# Draw the detected circles on the original image
for (x, y, r) in circle_candidates:
    cv2.circle(output, (x, y), r, (0, 255, 0), 2)  # Green boundary
    cv2.circle(output, (x, y), 2, (0, 0, 255), 3)  # Red center

# Show the final result with detected circles
plt.figure(figsize=(10, 10))
plt.imshow(cv2.cvtColor(output, cv2.COLOR_BGR2RGB))
plt.title("Detected Circle Candidates")
plt.axis("off")
plt.show()


import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
image_path = "/mnt/data/your_image.jpeg"  # Replace with your image path
image = cv2.imread(image_path)
output = image.copy()

# Step 1: Convert to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
plt.figure(figsize=(10, 10))
plt.imshow(gray, cmap='gray')
plt.title("Grayscale Image")
plt.axis("off")
plt.show()

# Step 2: Apply Gaussian blur to smooth edges
blurred = cv2.GaussianBlur(gray, (5, 5), 1)
plt.figure(figsize=(10, 10))
plt.imshow(blurred, cmap='gray')
plt.title("Blurred Image")
plt.axis("off")
plt.show()

# Step 3: Apply adaptive thresholding to get binary image
thresh = cv2.adaptiveThreshold(blurred, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                               cv2.THRESH_BINARY_INV, 11, 3)
plt.figure(figsize=(10, 10))
plt.imshow(thresh, cmap='gray')
plt.title("Adaptive Thresholded Image")
plt.axis("off")
plt.show()

# Step 4: Detect contours in the binary image
contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Step 5: Loop through contours and filter based on circularity
circle_candidates = []
for contour in contours:
    # Fit an enclosing circle to get the radius
    ((x, y), radius) = cv2.minEnclosingCircle(contour)
    area = cv2.contourArea(contour)
    
    if radius > 5 and radius < 20:  # Radius range (adjust as needed)
        # Check circularity
        circularity = 4 * np.pi * (area / (cv2.arcLength(contour, True) ** 2))
        if 0.7 < circularity < 1.2:  # Circularity threshold for approximate circles
            circle_candidates.append((int(x), int(y), int(radius)))

# Display the binary image with contours overlaid to check detected shapes
contour_overlay = cv2.cvtColor(thresh, cv2.COLOR_GRAY2BGR)
cv2.drawContours(contour_overlay, contours, -1, (0, 255, 0), 1)

plt.figure(figsize=(10, 10))
plt.imshow(contour_overlay)
plt.title("Contours Detected on Thresholded Image")
plt.axis("off")
plt.show()

# Draw the detected circles on the original image
for (x, y, r) in circle_candidates:
    cv2.circle(output, (x, y), r, (0, 255, 0), 2)  # Green boundary
    cv2.circle(output, (x, y), 2, (0, 0, 255), 3)  # Red center

# Show the final result with detected circles
plt.figure(figsize=(10, 10))
plt.imshow(cv2.cvtColor(output, cv2.COLOR_BGR2RGB))
plt.title("Detected Circle Candidates")
plt.axis("off")
plt.show()