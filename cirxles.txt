import cv2
import numpy as np
import matplotlib.pyplot as plt

def show_image(title, image, cmap=None):
    plt.figure(figsize=(10, 10))
    plt.imshow(image, cmap=cmap)
    plt.title(title)
    plt.axis("off")
    plt.show()

def normalize_image(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    equalized = cv2.equalizeHist(gray)
    normalized = cv2.normalize(equalized, None, 0, 255, cv2.NORM_MINMAX)
    return normalized

def denoise_image(image):
    return cv2.fastNlMeansDenoising(image, None, 30, 7, 21)

def apply_threshold(image):
    contrast_image = cv2.equalizeHist(image)
    thresh = cv2.adaptiveThreshold(contrast_image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                   cv2.THRESH_BINARY_INV, 11, 2)
    return thresh

def apply_morphology(thresh_image):
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))
    return cv2.morphologyEx(thresh_image, cv2.MORPH_CLOSE, kernel)

def find_circles_contours(thresh_image):
    contours, _ = cv2.findContours(thresh_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    circle_candidates = []
    for contour in contours:
        ((x, y), radius) = cv2.minEnclosingCircle(contour)
        area = cv2.contourArea(contour)
        perimeter = cv2.arcLength(contour, True)
        
        if perimeter == 0:
            continue
        
        circularity = 4 * np.pi * (area / (perimeter ** 2))
        if 0.7 < circularity < 1.3 and 5 < radius < 50 and area > 30:
            circle_candidates.append((int(x), int(y), int(radius)))
    
    return circle_candidates

def calculate_pixel_to_mm_ratio(circles, known_distance_mm=10):
    if len(circles) == 3:
        circles = sorted(circles, key=lambda c: c[0])
        x1, y1, _ = circles[0]
        x3, y3, _ = circles[2]
        pixel_distance = np.sqrt((x3 - x1) ** 2 + (y3 - y1) ** 2)
        if pixel_distance > 0:
            return known_distance_mm / pixel_distance
    return None

def draw_circles_and_line(image, circles, pixel_to_mm_ratio):
    output = image.copy()
    if len(circles) == 3:
        circles = sorted(circles, key=lambda c: c[0])
        for (x, y, r) in circles:
            cv2.circle(output, (x, y), r, (0, 255, 0), 2)
            cv2.circle(output, (x, y), 2, (0, 0, 255), 3)
        x1, y1, r1 = circles[0]
        x3, y3, r3 = circles[2]
        cv2.line(output, (x1, y1), (x3, y3), (255, 0, 0), 2)
        text = f"1 px = {pixel_to_mm_ratio:.4f} mm"
        cv2.putText(output, text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)

    show_image("Detected Circles and Line", cv2.cvtColor(output, cv2.COLOR_BGR2RGB))

def measure_bounding_boxes(image, thresh_image, pixel_to_mm_ratio, min_size=10, max_size=500):
    contours, _ = cv2.findContours(thresh_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    output = image.copy()

    # Debug: Check if contours are detected
    print(f"Total contours detected: {len(contours)}")
    
    for contour in contours:
        x, y, w, h = cv2.boundingRect(contour)
        
        # Debug: Print each bounding box size before filtering
        print(f"Bounding box (w, h): ({w}, {h})")
        
        # Filter out bounding boxes that are too small or too large
        if min_size < w < max_size and min_size < h < max_size:
            width_mm = w * pixel_to_mm_ratio
            height_mm = h * pixel_to_mm_ratio
            cv2.rectangle(output, (x, y), (x + w, y + h), (255, 0, 0), 2)
            measurement_text = f"{width_mm:.2f} x {height_mm:.2f} mm"
            cv2.putText(output, measurement_text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)
        else:
            # Debug: Indicate if a bounding box is filtered out
            print(f"Bounding box filtered out (w, h): ({w}, {h})")

    show_image("Measured Bounding Boxes", cv2.cvtColor(output, cv2.COLOR_BGR2RGB))

def process_image(image_path):
    image = cv2.imread(image_path)
    normalized_image = normalize_image(image)
    denoised_image = denoise_image(normalized_image)
    thresh_image = apply_threshold(denoised_image)
    morphed_image = apply_morphology(thresh_image)

    circles = find_circles_contours(morphed_image)
    pixel_to_mm_ratio = calculate_pixel_to_mm_ratio(circles)
    
    if pixel_to_mm_ratio:
        draw_circles_and_line(image, circles, pixel_to_mm_ratio)
        measure_bounding_boxes(image, morphed_image, pixel_to_mm_ratio)
    else:
        print("Could not calculate pixel-to-mm ratio. Check circle detection.")

# Replace '/path/to/your/image.jpg' with the path to your actual image
image_path = "/path/to/your/image.jpg"
process_image(image_path)




import cv2
import numpy as np
import matplotlib.pyplot as plt

def show_image(title, image, cmap=None):
    plt.figure(figsize=(10, 10))
    plt.imshow(image, cmap=cmap)
    plt.title(title)
    plt.axis("off")
    plt.show()

def normalize_image(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    equalized = cv2.equalizeHist(gray)
    normalized = cv2.normalize(equalized, None, 0, 255, cv2.NORM_MINMAX)
    return normalized

def denoise_image(image):
    return cv2.fastNlMeansDenoising(image, None, 30, 7, 21)

def apply_threshold(image):
    contrast_image = cv2.equalizeHist(image)
    thresh = cv2.adaptiveThreshold(contrast_image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                   cv2.THRESH_BINARY_INV, 11, 2)
    return thresh

def apply_morphology(thresh_image):
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))
    return cv2.morphologyEx(thresh_image, cv2.MORPH_CLOSE, kernel)

def find_circles_contours(thresh_image):
    contours, _ = cv2.findContours(thresh_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    circle_candidates = []
    for contour in contours:
        ((x, y), radius) = cv2.minEnclosingCircle(contour)
        area = cv2.contourArea(contour)
        perimeter = cv2.arcLength(contour, True)
        
        if perimeter == 0:
            continue
        
        circularity = 4 * np.pi * (area / (perimeter ** 2))
        if 0.7 < circularity < 1.3 and 5 < radius < 50 and area > 30:
            circle_candidates.append((int(x), int(y), int(radius)))
    
    return circle_candidates

def calculate_pixel_to_mm_ratio(circles, known_distance_mm=10):
    if len(circles) == 3:
        circles = sorted(circles, key=lambda c: c[0])
        x1, y1, _ = circles[0]
        x3, y3, _ = circles[2]
        pixel_distance = np.sqrt((x3 - x1) ** 2 + (y3 - y1) ** 2)
        if pixel_distance > 0:
            return known_distance_mm / pixel_distance
    return None

def draw_circles_and_line(image, circles, pixel_to_mm_ratio):
    output = image.copy()
    if len(circles) == 3:
        circles = sorted(circles, key=lambda c: c[0])
        for (x, y, r) in circles:
            cv2.circle(output, (x, y), r, (0, 255, 0), 2)
            cv2.circle(output, (x, y), 2, (0, 0, 255), 3)
        x1, y1, r1 = circles[0]
        x3, y3, r3 = circles[2]
        cv2.line(output, (x1, y1), (x3, y3), (255, 0, 0), 2)
        text = f"1 px = {pixel_to_mm_ratio:.4f} mm"
        cv2.putText(output, text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)

    show_image("Detected Circles and Line", cv2.cvtColor(output, cv2.COLOR_BGR2RGB))

def measure_bounding_boxes(image, thresh_image, pixel_to_mm_ratio, min_size=20, max_size=200):
    contours, _ = cv2.findContours(thresh_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    output = image.copy()

    for contour in contours:
        x, y, w, h = cv2.boundingRect(contour)
        
        # Filter out bounding boxes that are too small or too large
        if min_size < w < max_size and min_size < h < max_size:
            width_mm = w * pixel_to_mm_ratio
            height_mm = h * pixel_to_mm_ratio
            cv2.rectangle(output, (x, y), (x + w, y + h), (255, 0, 0), 2)
            measurement_text = f"{width_mm:.2f} x {height_mm:.2f} mm"
            cv2.putText(output, measurement_text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)
    
    show_image("Measured Bounding Boxes", cv2.cvtColor(output, cv2.COLOR_BGR2RGB))

def process_image(image_path):
    image = cv2.imread(image_path)
    normalized_image = normalize_image(image)
    denoised_image = denoise_image(normalized_image)
    thresh_image = apply_threshold(denoised_image)
    morphed_image = apply_morphology(thresh_image)

    circles = find_circles_contours(morphed_image)
    pixel_to_mm_ratio = calculate_pixel_to_mm_ratio(circles)
    
    if pixel_to_mm_ratio:
        draw_circles_and_line(image, circles, pixel_to_mm_ratio)
        measure_bounding_boxes(image, morphed_image, pixel_to_mm_ratio)
    else:
        print("Could not calculate pixel-to-mm ratio. Check circle detection.")

# Replace '/path/to/your/image.jpg' with the path to your actual image
image_path = "/path/to/your/image.jpg"
process_image(image_path)


import cv2
import numpy as np
import matplotlib.pyplot as plt

def show_image(title, image, cmap=None):
    plt.figure(figsize=(10, 10))
    plt.imshow(image, cmap=cmap)
    plt.title(title)
    plt.axis("off")
    plt.show()

def normalize_image(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    equalized = cv2.equalizeHist(gray)
    normalized = cv2.normalize(equalized, None, 0, 255, cv2.NORM_MINMAX)
    return normalized

def denoise_image(image):
    return cv2.fastNlMeansDenoising(image, None, 30, 7, 21)

def apply_threshold(image):
    contrast_image = cv2.equalizeHist(image)
    thresh = cv2.adaptiveThreshold(contrast_image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                   cv2.THRESH_BINARY_INV, 11, 2)
    return thresh

def apply_morphology(thresh_image):
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))
    return cv2.morphologyEx(thresh_image, cv2.MORPH_CLOSE, kernel)

def find_circles_contours(thresh_image):
    contours, _ = cv2.findContours(thresh_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    circle_candidates = []
    for contour in contours:
        ((x, y), radius) = cv2.minEnclosingCircle(contour)
        area = cv2.contourArea(contour)
        perimeter = cv2.arcLength(contour, True)
        
        if perimeter == 0:
            continue
        
        circularity = 4 * np.pi * (area / (perimeter ** 2))
        if 0.7 < circularity < 1.3 and 5 < radius < 50 and area > 30:
            circle_candidates.append((int(x), int(y), int(radius)))
    
    return circle_candidates

def calculate_pixel_to_mm_ratio(circles, known_distance_mm=10):
    if len(circles) == 3:
        # Sort circles by x-coordinate to ensure a consistent order (left-to-right or top-to-bottom)
        circles = sorted(circles, key=lambda c: c[0])
        
        x1, y1, _ = circles[0]
        x3, y3, _ = circles[2]
        
        # Calculate the pixel length of the line between the first and third circles
        pixel_distance = np.sqrt((x3 - x1) ** 2 + (y3 - y1) ** 2)
        
        # Calculate and return the pixel-to-mm ratio
        return known_distance_mm / pixel_distance
    return None

def draw_circles_and_line(image, circles, pixel_to_mm_ratio):
    output = image.copy()
    if len(circles) == 3:
        circles = sorted(circles, key=lambda c: c[0])
        for (x, y, r) in circles:
            cv2.circle(output, (x, y), r, (0, 255, 0), 2)
            cv2.circle(output, (x, y), 2, (0, 0, 255), 3)
        x1, y1, r1 = circles[0]
        x3, y3, r3 = circles[2]
        cv2.line(output, (x1, y1), (x3, y3), (255, 0, 0), 2)
        
        # Display the pixel-to-mm ratio on the image
        text = f"1 px = {pixel_to_mm_ratio:.4f} mm"
        cv2.putText(output, text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)

    show_image("Detected Circles and Line", cv2.cvtColor(output, cv2.COLOR_BGR2RGB))

def measure_bounding_boxes(image, thresh_image, pixel_to_mm_ratio):
    contours, _ = cv2.findContours(thresh_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    output = image.copy()

    for contour in contours:
        x, y, w, h = cv2.boundingRect(contour)
        
        # Convert bounding box dimensions from pixels to millimeters
        width_mm = w * pixel_to_mm_ratio
        height_mm = h * pixel_to_mm_ratio
        
        # Draw bounding box and dimensions
        cv2.rectangle(output, (x, y), (x + w, y + h), (255, 0, 0), 2)
        measurement_text = f"{width_mm:.2f} x {height_mm:.2f} mm"
        cv2.putText(output, measurement_text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)
    
    show_image("Measured Bounding Boxes", cv2.cvtColor(output, cv2.COLOR_BGR2RGB))

def process_image(image_path):
    image = cv2.imread(image_path)
    normalized_image = normalize_image(image)
    denoised_image = denoise_image(normalized_image)
    thresh_image = apply_threshold(denoised_image)
    morphed_image = apply_morphology(thresh_image)

    circles = find_circles_contours(morphed_image)
    
    # Calculate pixel-to-mm ratio using the line between the three detected circles
    pixel_to_mm_ratio = calculate_pixel_to_mm_ratio(circles)
    
    if pixel_to_mm_ratio:
        # Draw circles and the line with the calculated pixel-to-mm ratio
        draw_circles_and_line(image, circles, pixel_to_mm_ratio)
        
        # Measure and display bounding box dimensions in millimeters
        measure_bounding_boxes(image, morphed_image, pixel_to_mm_ratio)
    else:
        print("Could not calculate pixel-to-mm ratio. Check circle detection.")

# Replace '/path/to/your/image.jpg' with the path to your actual image
image_path = "/path/to/your/image.jpg"
process_image(image_path)





import cv2
import numpy as np
import matplotlib.pyplot as plt

# Function to show images
def show_image(title, image, cmap=None):
    plt.figure(figsize=(10, 10))
    plt.imshow(image, cmap=cmap)
    plt.title(title)
    plt.axis("off")
    plt.show()

# Step 1: Normalize the image
def normalize_image(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    equalized = cv2.equalizeHist(gray)
    normalized = cv2.normalize(equalized, None, 0, 255, cv2.NORM_MINMAX)
    return normalized

# Step 2: Optional Denoising
def denoise_image(image):
    denoised = cv2.fastNlMeansDenoising(image, None, 30, 7, 21)
    return denoised

# Step 3: Adaptive Thresholding
def apply_threshold(image):
    thresh = cv2.adaptiveThreshold(image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                   cv2.THRESH_BINARY_INV, 11, 2)
    return thresh

# Step 4: Contour-Based Circle Detection
def find_circles_contours(thresh_image):
    contours, _ = cv2.findContours(thresh_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    circle_candidates = []
    for contour in contours:
        ((x, y), radius) = cv2.minEnclosingCircle(contour)
        area = cv2.contourArea(contour)
        perimeter = cv2.arcLength(contour, True)
        
        # Skip contours with zero perimeter to avoid division by zero
        if perimeter == 0:
            continue
        
        # Compute circularity to filter circular shapes
        circularity = 4 * np.pi * (area / (perimeter ** 2))
        if 0.7 < circularity < 1.3 and 5 < radius < 50:  # Adjust radius range if needed
            circle_candidates.append((int(x), int(y), int(radius)))
    
    return circle_candidates

# Step 5: Drawing Circles and Distance Line
def draw_circles_and_line(image, circles, title):
    output = image.copy()
    if len(circles) == 3:
        circles = sorted(circles, key=lambda c: c[0])
        for (x, y, r) in circles:
            cv2.circle(output, (x, y), r, (0, 255, 0), 2)  # Green circle boundary
            cv2.circle(output, (x, y), 2, (0, 0, 255), 3)  # Red center
        x1, y1, r1 = circles[0]
        x3, y3, r3 = circles[2]
        cv2.line(output, (x1 - r1, y1), (x3 + r3, y3), (255, 0, 0), 2)  # Blue line
    show_image(title, cv2.cvtColor(output, cv2.COLOR_BGR2RGB))

# Complete Workflow
def process_image(image_path):
    # Load the image
    image = cv2.imread(image_path)

    # Step 1: Normalize
    normalized_image = normalize_image(image)
    show_image("Normalized Image", normalized_image, cmap='gray')

    # Step 2: Denoising (optional)
    denoised_image = denoise_image(normalized_image)
    show_image("Denoised Image", denoised_image, cmap='gray')

    # Step 3: Thresholding
    thresh_image = apply_threshold(denoised_image)
    show_image("Thresholded Image", thresh_image, cmap='gray')

    # Step 4: Find circles
    circles = find_circles_contours(thresh_image)
    print("Detected circles:", circles)

    # Step 5: Draw circles and distance line
    draw_circles_and_line(image, circles, "Detected Circles (Contours)")

# Example usage
image_path = "/path/to/your/image.jpg"  # Replace with actual path
process_image(image_path)






import cv2
import numpy as np
import matplotlib.pyplot as plt
import math

def show_image(title, image, cmap=None):
    plt.figure(figsize=(10, 10))
    plt.imshow(image, cmap=cmap)
    plt.title(title)
    plt.axis("off")
    plt.show()

def filter_and_select_circles(circles, max_y_diff=10):
    """Filter circles to get the closest aligned set of three."""
    circles = sorted(circles, key=lambda c: (c[1], c[0]))
    filtered_circles = []
    for i in range(len(circles) - 2):
        y_diff1 = abs(circles[i][1] - circles[i+1][1])
        y_diff2 = abs(circles[i+1][1] - circles[i+2][1])
        if y_diff1 < max_y_diff and y_diff2 < max_y_diff:
            filtered_circles = circles[i:i+3]
            break
    return filtered_circles

def draw_circles_and_line(image, circles, title):
    """Draw circles and a line between the outer edges of the first and last circle in the trio."""
    output = image.copy()
    if len(circles) == 3:
        circles = sorted(circles, key=lambda c: c[0])
        for (x, y, r) in circles:
            cv2.circle(output, (x, y), r, (0, 255, 0), 2)
            cv2.circle(output, (x, y), 2, (0, 0, 255), 3)

        x1, y1, r1 = circles[0]
        x3, y3, r3 = circles[2]
        cv2.line(output, (x1 - r1, y1), (x3 + r3, y3), (255, 0, 0), 2)  # Blue line showing the distance
    show_image(title, cv2.cvtColor(output, cv2.COLOR_BGR2RGB))

def find_circles_contours(image):
    """Detect circles using contour-based approach."""
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (3, 3), 1)
    show_image("Grayscale Image (Contours)", gray, cmap='gray')
    show_image("Blurred Image (Contours)", blurred, cmap='gray')
    
    thresh = cv2.adaptiveThreshold(blurred, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                   cv2.THRESH_BINARY_INV, 11, 2)
    show_image("Thresholded Image (Contours)", thresh, cmap='gray')
    
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    circle_candidates = []
    for contour in contours:
        ((x, y), radius) = cv2.minEnclosingCircle(contour)
        area = cv2.contourArea(contour)
        perimeter = cv2.arcLength(contour, True)
        if perimeter == 0:
            continue
        circularity = 4 * np.pi * (area / (perimeter ** 2))
        if 0.7 < circularity < 1.3 and 5 < radius < 50:
            circle_candidates.append((int(x), int(y), int(radius)))
    
    filtered_circles = filter_and_select_circles(circle_candidates)
    return filtered_circles

# Conversion and Measurement
def calculate_conversion_factor(known_mm_distance, point1, point2):
    """Calculate conversion factor from pixels to mm."""
    pixel_distance = np.sqrt((point2[0] - point1[0]) ** 2 + (point2[1] - point1[1]) ** 2)
    return known_mm_distance / pixel_distance

def measure_bounding_box_mm(bbox, conversion_factor):
    """Convert bounding box dimensions from pixels to mm."""
    width_pixels = bbox[2]
    height_pixels = bbox[3]
    width_mm = width_pixels * conversion_factor
    height_mm = height_pixels * conversion_factor
    return width_mm, height_mm

def detect_bounding_box(image):
    """Detect the largest bounding box around the object of interest."""
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 50, 255, cv2.THRESH_BINARY)
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    largest_contour = max(contours, key=cv2.contourArea)
    bbox = cv2.boundingRect(largest_contour)
    return bbox

# Load your image
image_path = "/path/to/your/image.jpg"  # Replace with actual path
image = cv2.imread(image_path)

# Step 1: Detect circles
contour_circles = find_circles_contours(image)
draw_circles_and_line(image, contour_circles, "Detected Circles (Contours)")

# Step 2: Calculate the pixel-to-mm conversion factor if we have three circles
if len(contour_circles) == 3:
    point1, point2 = (contour_circles[0][0], contour_circles[0][1]), (contour_circles[2][0], contour_circles[2][1])
    known_mm_distance = 10.0  # Known distance in mm between the first and third circle
    conversion_factor = calculate_conversion_factor(known_mm_distance, point1, point2)
    print(f"Conversion factor: {conversion_factor:.4f} mm per pixel")

    # Step 3: Detect and measure the bounding box in mm
    bbox = detect_bounding_box(image)
    width_mm, height_mm = measure_bounding_box_mm(bbox, conversion_factor)
    print(f"Bounding box dimensions: {width_mm:.2f} mm x {height_mm:.2f} mm")

    # Draw the bounding box on the image
    x, y, w, h = bbox
    output_image = image.copy()
    cv2.rectangle(output_image, (x, y), (x + w, y + h), (0, 0, 255), 2)  # Red bounding box
    show_image("Bounding Box with Measured Dimensions", cv2.cvtColor(output_image, cv2.COLOR_BGR2RGB))
else:
    print("Less than 3 circles found; unable to calculate distance.")




import cv2
import numpy as np
import matplotlib.pyplot as plt
import math

def show_image(title, image, cmap=None):
    plt.figure(figsize=(10, 10))
    plt.imshow(image, cmap=cmap)
    plt.title(title)
    plt.axis("off")
    plt.show()

def draw_circles_and_line(image, circles, title):
    """Draw circles and a line between the outer edges of the first and last circle in the trio."""
    output = image.copy()
    if len(circles) >= 3:
        # Sort circles by x-coordinate to ensure a consistent order
        circles = sorted(circles, key=lambda c: c[0])

        # Draw each detected circle
        for (x, y, r) in circles:
            cv2.circle(output, (x, y), r, (0, 255, 0), 2)  # Green circle boundary
            cv2.circle(output, (x, y), 2, (0, 0, 255), 3)  # Red center

        # Draw a line between the edges of the first and third circles in the trio
        x1, y1, r1 = circles[0]
        x3, y3, r3 = circles[2]
        cv2.line(output, (x1 - r1, y1), (x3 + r3, y3), (255, 0, 0), 2)  # Blue line showing the distance

    # Show the result with detected circles and the line
    show_image(title, cv2.cvtColor(output, cv2.COLOR_BGR2RGB))

def find_circles_hough(image):
    """Detect circles using the Hough Circle Transform."""
    # Convert to grayscale and apply Gaussian blur
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (9, 9), 2)
    show_image("Grayscale Image (Hough Circles)", gray, cmap='gray')
    show_image("Blurred Image (Hough Circles)", blurred, cmap='gray')
    
    # Use Hough Circle Transform to detect circles
    circles = cv2.HoughCircles(blurred, cv2.HOUGH_GRADIENT, dp=1.2, minDist=30, 
                               param1=50, param2=30, minRadius=5, maxRadius=50)
    if circles is not None:
        circles = np.round(circles[0, :]).astype("int")
        if len(circles) > 3:
            circles = sorted(circles, key=lambda c: c[2], reverse=True)[:3]
    else:
        circles = []
    
    return circles

def find_circles_contours(image):
    """Detect circles using contour-based approach."""
    # Convert to grayscale and apply Gaussian blur
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (3, 3), 1)
    show_image("Grayscale Image (Contours)", gray, cmap='gray')
    show_image("Blurred Image (Contours)", blurred, cmap='gray')
    
    # Apply adaptive thresholding and show result
    thresh = cv2.adaptiveThreshold(blurred, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                   cv2.THRESH_BINARY_INV, 11, 2)
    show_image("Thresholded Image (Contours)", thresh, cmap='gray')
    
    # Detect contours
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Filter contours based on circularity and radius
    circle_candidates = []
    for contour in contours:
        ((x, y), radius) = cv2.minEnclosingCircle(contour)
        area = cv2.contourArea(contour)
        if radius > 0:
            circularity = 4 * np.pi * (area / (cv2.arcLength(contour, True) ** 2))
            if 0.7 < circularity < 1.3 and 5 < radius < 50:  # Adjust as needed
                circle_candidates.append((int(x), int(y), int(radius)))
    
    # Sort by radius and select top three if more than three are detected
    if len(circle_candidates) > 3:
        circle_candidates = sorted(circle_candidates, key=lambda c: -c[2])[:3]
    
    return circle_candidates

# Load your image
image_path = "/path/to/your/image.jpg"
image = cv2.imread(image_path)

# Detect circles using Hough Circles
hough_circles = find_circles_hough(image)
draw_circles_and_line(image, hough_circles, "Detected Circles (Hough Transform)")

# Detect circles using Contours
contour_circles = find_circles_contours(image)
draw_circles_and_line(image, contour_circles, "Detected Circles (Contours)")