# Adversarial training function
def train_adversarial(feature_extractor, label_predictor, discriminator, train_loader, num_epochs=50, lr=0.001):
    criterion = nn.BCELoss()
    optimizer_fe = optim.Adam(feature_extractor.parameters(), lr=lr)
    optimizer_lp = optim.Adam(label_predictor.parameters(), lr=lr)
    optimizer_d = optim.Adam(discriminator.parameters(), lr=lr)
    
    for epoch in range(num_epochs):
        for data, labels, domains in train_loader:
            feature_extractor.train()
            label_predictor.train()
            discriminator.train()

            # Step 1: Train Label Predictor
            optimizer_fe.zero_grad()
            optimizer_lp.zero_grad()
            features = feature_extractor(data)
            label_preds = label_predictor(features)
            loss_lp = criterion(label_preds, labels)
            loss_lp.backward()
            optimizer_fe.step()
            optimizer_lp.step()
            
            # Step 2: Train Domain Discriminator
            optimizer_d.zero_grad()
            domain_preds = discriminator(features.detach())
            loss_d = criterion(domain_preds, domains)
            loss_d.backward()
            optimizer_d.step()
            
            # Step 3: Train Feature Extractor to fool the discriminator
            optimizer_fe.zero_grad()
            domain_preds = discriminator(features)
            loss_adv = criterion(domain_preds, 1 - domains)
            loss_adv.backward()
            optimizer_fe.step()

        print(f"Epoch {epoch + 1}/{num_epochs}, Label Loss: {loss_lp.item():.4f}, Discriminator Loss: {loss_d.item():.4f}")

# Initialize networks
input_dim = X_train.shape[1]
hidden_dim = 128
output_dim = 1

feature_extractor = FeatureExtractor(input_dim, hidden_dim)
label_predictor = LabelPredictor(hidden_dim, output_dim)
discriminator = DomainDiscriminator(hidden_dim)

# Train the adversarial model
train_adversarial(feature_extractor, label_predictor, discriminator, train_loader)
